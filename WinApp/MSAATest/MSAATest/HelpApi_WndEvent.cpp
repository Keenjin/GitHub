#include "stdafx.h"
#include "HelpApi.h"
#include <atlstr.h>
#include <Windows.h>

typedef struct _ID_NAME
{
	LONG dwID;
	CAtlString strName;
}ID_NAME, *PID_NAME;


const ID_NAME vecEvent[] = {
	{ EVENT_OBJECT_CREATE, L"EVENT_OBJECT_CREATE" },
	{ EVENT_OBJECT_DESTROY, L"EVENT_OBJECT_DESTROY" },
	{ EVENT_OBJECT_SHOW, L"EVENT_OBJECT_SHOW" },
	{ EVENT_OBJECT_HIDE, L"EVENT_OBJECT_HIDE" },
	{ EVENT_SYSTEM_MINIMIZESTART, L"EVENT_SYSTEM_MINIMIZESTART" },
	{ EVENT_SYSTEM_MINIMIZEEND, L"EVENT_SYSTEM_MINIMIZEEND" },
	{ EVENT_SYSTEM_MENUPOPUPSTART, L"EVENT_SYSTEM_MENUPOPUPSTART" },
	{ EVENT_SYSTEM_MENUPOPUPEND, L"EVENT_SYSTEM_MENUPOPUPEND" },
	{ EVENT_SYSTEM_MENUSTART, L"EVENT_SYSTEM_MENUSTART" },
	{ EVENT_SYSTEM_MENUEND, L"EVENT_SYSTEM_MENUEND" },
	{ EVENT_SYSTEM_DIALOGSTART, L"EVENT_SYSTEM_DIALOGSTART" },
	{ EVENT_SYSTEM_DIALOGEND, L"EVENT_SYSTEM_DIALOGEND" },
	{ EVENT_OBJECT_LOCATIONCHANGE, L"EVENT_OBJECT_LOCATIONCHANGE" },
	{ EVENT_OBJECT_NAMECHANGE, L"EVENT_OBJECT_NAMECHANGE" },
	{ EVENT_OBJECT_DESCRIPTIONCHANGE, L"EVENT_OBJECT_DESCRIPTIONCHANGE" },
	{ EVENT_OBJECT_VALUECHANGE, L"EVENT_OBJECT_VALUECHANGE" },
	{ EVENT_OBJECT_PARENTCHANGE, L"EVENT_OBJECT_PARENTCHANGE" },
	{ EVENT_SYSTEM_CONTEXTHELPSTART, L"EVENT_SYSTEM_CONTEXTHELPSTART" },
	{ EVENT_OBJECT_ACCELERATORCHANGE, L"EVENT_OBJECT_ACCELERATORCHANGE" },
	{ EVENT_OBJECT_CLOAKED, L"EVENT_OBJECT_CLOAKED" },
	{ EVENT_OBJECT_CONTENTSCROLLED, L"EVENT_OBJECT_CONTENTSCROLLED" },
	{ EVENT_OBJECT_DEFACTIONCHANGE, L"EVENT_OBJECT_DEFACTIONCHANGE" },
	{ EVENT_OBJECT_DRAGSTART, L"EVENT_OBJECT_DRAGSTART" },
	{ EVENT_OBJECT_DRAGCANCEL, L"EVENT_OBJECT_DRAGCANCEL" },
	{ EVENT_OBJECT_DRAGCOMPLETE, L"EVENT_OBJECT_DRAGCOMPLETE" },
	{ EVENT_OBJECT_DRAGENTER, L"EVENT_OBJECT_DRAGENTER" },
	{ EVENT_OBJECT_DRAGLEAVE, L"EVENT_OBJECT_DRAGLEAVE" },
	{ EVENT_OBJECT_DRAGDROPPED, L"EVENT_OBJECT_DRAGDROPPED" },
	{ EVENT_OBJECT_FOCUS, L"EVENT_OBJECT_FOCUS" },
	{ EVENT_OBJECT_HELPCHANGE, L"EVENT_OBJECT_HELPCHANGE" },
	{ EVENT_OBJECT_IME_HIDE, L"EVENT_OBJECT_IME_HIDE" },
	{ EVENT_OBJECT_IME_SHOW, L"EVENT_OBJECT_IME_SHOW" },
	{ EVENT_OBJECT_IME_CHANGE, L"EVENT_OBJECT_IME_CHANGE" },
	{ EVENT_OBJECT_INVOKED, L"EVENT_OBJECT_INVOKED" },
	{ EVENT_OBJECT_LIVEREGIONCHANGED, L"EVENT_OBJECT_LIVEREGIONCHANGED" },
	{ EVENT_OBJECT_REORDER, L"EVENT_OBJECT_REORDER" },
	{ EVENT_OBJECT_SELECTION, L"EVENT_OBJECT_SELECTION" },
	{ EVENT_OBJECT_SELECTIONADD, L"EVENT_OBJECT_SELECTIONADD" },
	{ EVENT_OBJECT_SELECTIONREMOVE, L"EVENT_OBJECT_SELECTIONREMOVE" },
	{ EVENT_OBJECT_SELECTIONWITHIN, L"EVENT_OBJECT_SELECTIONWITHIN" },
	{ EVENT_OBJECT_STATECHANGE, L"EVENT_OBJECT_STATECHANGE" },
	{ EVENT_OBJECT_TEXTEDIT_CONVERSIONTARGETCHANGED, L"EVENT_OBJECT_TEXTEDIT_CONVERSIONTARGETCHANGED" },
	{ EVENT_OBJECT_TEXTSELECTIONCHANGED, L"EVENT_OBJECT_TEXTSELECTIONCHANGED" },
	{ EVENT_OBJECT_UNCLOAKED, L"EVENT_OBJECT_UNCLOAKED" },
	{ EVENT_SYSTEM_ALERT, L"EVENT_SYSTEM_ALERT" },
	{ EVENT_SYSTEM_CAPTUREEND, L"EVENT_SYSTEM_CAPTUREEND" },
	{ EVENT_SYSTEM_CAPTURESTART, L"EVENT_SYSTEM_CAPTURESTART" },
	{ EVENT_SYSTEM_CONTEXTHELPEND, L"EVENT_SYSTEM_CONTEXTHELPEND" },
	{ EVENT_SYSTEM_CONTEXTHELPSTART, L"EVENT_SYSTEM_CONTEXTHELPSTART" },
	{ EVENT_SYSTEM_DESKTOPSWITCH, L"EVENT_SYSTEM_DESKTOPSWITCH" },
	{ EVENT_SYSTEM_DRAGDROPEND, L"EVENT_SYSTEM_DRAGDROPEND" },
	{ EVENT_SYSTEM_DRAGDROPSTART, L"EVENT_SYSTEM_DRAGDROPSTART" },
	{ EVENT_SYSTEM_FOREGROUND, L"EVENT_SYSTEM_FOREGROUND" },
	{ EVENT_SYSTEM_MOVESIZEEND, L"EVENT_SYSTEM_MOVESIZEEND" },
	{ EVENT_SYSTEM_MOVESIZESTART, L"EVENT_SYSTEM_MOVESIZESTART" },
	{ EVENT_SYSTEM_SCROLLINGEND, L"EVENT_SYSTEM_SCROLLINGEND" },
	{ EVENT_SYSTEM_SCROLLINGSTART, L"EVENT_SYSTEM_SCROLLINGSTART" },
	{ EVENT_SYSTEM_SOUND, L"EVENT_SYSTEM_SOUND" },
	{ EVENT_SYSTEM_SWITCHEND, L"EVENT_SYSTEM_SWITCHEND" },
	{ EVENT_SYSTEM_SWITCHSTART, L"EVENT_SYSTEM_SWITCHSTART" },
	{ EVENT_SYSTEM_ARRANGMENTPREVIEW, L"EVENT_SYSTEM_ARRANGMENTPREVIEW" },
	{ EVENT_OBJECT_HOSTEDOBJECTSINVALIDATED, L"EVENT_OBJECT_HOSTEDOBJECTSINVALIDATED" }
};

CAtlString HELP_API::WND_EVENT_API::WndEventName(DWORD dwID)
{
	CAtlString strName;

	for (size_t i = 0; i < _countof(vecEvent); i++)
	{
		if (dwID == vecEvent[i].dwID)
		{
			strName = vecEvent[i].strName;
			break;
		}
	}

	if (strName.IsEmpty())
	{
		strName.Format(L"%d", dwID);
	}

	return strName;
}

const ID_NAME vecObject[] = {
	{ OBJID_WINDOW, L"OBJID_WINDOW" },
	{ OBJID_SYSMENU, L"OBJID_SYSMENU" },
	{ OBJID_TITLEBAR, L"OBJID_TITLEBAR" },
	{ OBJID_MENU, L"OBJID_MENU" },
	{ OBJID_CLIENT, L"OBJID_CLIENT" },
	{ OBJID_VSCROLL, L"OBJID_VSCROLL" },
	{ OBJID_HSCROLL, L"OBJID_HSCROLL" },
	{ OBJID_SIZEGRIP, L"OBJID_SIZEGRIP" },
	{ OBJID_CARET, L"OBJID_CARET" },
	{ OBJID_CURSOR, L"OBJID_CURSOR" },
	{ OBJID_ALERT, L"OBJID_ALERT" },
	{ OBJID_SOUND, L"OBJID_SOUND" },
	{ OBJID_QUERYCLASSNAMEIDX, L"OBJID_QUERYCLASSNAMEIDX" },
	{ OBJID_NATIVEOM, L"OBJID_NATIVEOM" }
};

CAtlString HELP_API::WND_EVENT_API::CtrlObjectName(DWORD dwID)
{
	CAtlString strName;

	for (size_t i = 0; i < _countof(vecObject); i++)
	{
		if (dwID == vecObject[i].dwID)
		{
			strName = vecObject[i].strName;
			break;
		}
	}

	if (strName.IsEmpty())
	{
		strName.Format(L"%d", dwID);
	}

	return strName;
}

CAtlString HELP_API::WND_EVENT_API::ChildIDName(DWORD dwID)
{
	CAtlString strName;

	if (dwID == CHILDID_SELF)
	{
		return L"CHILDID_SELF";
	}
	else
	{
		strName.Format(L"%d", dwID);
	}

	return strName;
}

HWND HELP_API::WND_EVENT_API::GetTopParentWnd(HWND hWnd)
{
	HWND hParent;
	HWND hTmp;
	hParent = hTmp = hWnd;
	hTmp = ::GetParent(hWnd);
	while (hTmp)
	{
		hParent = hTmp;
		hTmp = ::GetParent(hTmp);
	}
	return hParent;
}

